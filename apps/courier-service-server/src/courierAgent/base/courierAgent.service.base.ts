/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CourierAgent as PrismaCourierAgent,
  Delivery as PrismaDelivery,
} from "@prisma/client";

export class CourierAgentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CourierAgentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.courierAgent.count(args);
  }

  async courierAgents<T extends Prisma.CourierAgentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CourierAgentFindManyArgs>
  ): Promise<PrismaCourierAgent[]> {
    return this.prisma.courierAgent.findMany<Prisma.CourierAgentFindManyArgs>(
      args
    );
  }
  async courierAgent<T extends Prisma.CourierAgentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CourierAgentFindUniqueArgs>
  ): Promise<PrismaCourierAgent | null> {
    return this.prisma.courierAgent.findUnique(args);
  }
  async createCourierAgent<T extends Prisma.CourierAgentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CourierAgentCreateArgs>
  ): Promise<PrismaCourierAgent> {
    return this.prisma.courierAgent.create<T>(args);
  }
  async updateCourierAgent<T extends Prisma.CourierAgentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CourierAgentUpdateArgs>
  ): Promise<PrismaCourierAgent> {
    return this.prisma.courierAgent.update<T>(args);
  }
  async deleteCourierAgent<T extends Prisma.CourierAgentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CourierAgentDeleteArgs>
  ): Promise<PrismaCourierAgent> {
    return this.prisma.courierAgent.delete(args);
  }

  async findDeliveries(
    parentId: string,
    args: Prisma.DeliveryFindManyArgs
  ): Promise<PrismaDelivery[]> {
    return this.prisma.courierAgent
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .deliveries(args);
  }
}
